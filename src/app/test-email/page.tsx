"use client"

import * as React from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { EMAILJS_CONFIG } from "@/lib/emailjs"

export default function TestEmailPage() {
  const [status, setStatus] = React.useState<string>("")
  const [isLoading, setIsLoading] = React.useState(false)
  const [logs, setLogs] = React.useState<string[]>([])

  const addLog = (message: string) => {
    setLogs(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`])
    console.log(message)
  }

  const testEmailJS = async () => {
    setIsLoading(true)
    setLogs([])
    setStatus("")

    try {
      addLog("üîß –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EmailJS...")

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      addLog(`üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`)
      addLog(`   SERVICE_ID: ${EMAILJS_CONFIG.SERVICE_ID}`)
      addLog(`   TEMPLATE_ID: ${EMAILJS_CONFIG.TEMPLATE_ID}`)
      addLog(`   PUBLIC_KEY: ${EMAILJS_CONFIG.PUBLIC_KEY.substring(0, 8)}...`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É EmailJS
      if (typeof window === 'undefined') {
        throw new Error("Window –æ–±—ä–µ–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
      }

      addLog("üåê Window –æ–±—ä–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")

      if (!window.emailjs) {
        addLog("‚ùå EmailJS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ window")
        addLog("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ EmailJS...")

        // –ñ–¥–µ–º –¥–æ 5 —Å–µ–∫—É–Ω–¥
        let attempts = 0
        while (!window.emailjs && attempts < 50) {
          await new Promise(resolve => setTimeout(resolve, 100))
          attempts++
        }

        if (!window.emailjs) {
          throw new Error("EmailJS –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∑–∞ 5 —Å–µ–∫—É–Ω–¥")
        }
      }

      addLog("‚úÖ EmailJS –Ω–∞–π–¥–µ–Ω –≤ window")

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º EmailJS
      addLog("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º EmailJS...")
      window.emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY)
      addLog("‚úÖ EmailJS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const testData = {
        to_name: "–¢–µ—Å—Ç",
        message: "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
      }

      addLog("üìß –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
      addLog(`   –ò–º—è: ${testData.to_name}`)
      addLog(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${testData.message}`)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π email
      addLog("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π email...")

      const result = await window.emailjs.send(
        EMAILJS_CONFIG.SERVICE_ID,
        EMAILJS_CONFIG.TEMPLATE_ID,
        testData,
        EMAILJS_CONFIG.PUBLIC_KEY
      )

      addLog("‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
      addLog(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(result)}`)
      setStatus("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
      addLog(`‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`)
      setStatus(`‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: ${errorMessage}`)

      if (error instanceof Error && error.stack) {
        addLog(`üìã –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`)
      }
    } finally {
      setIsLoading(false)
    }
  }

  const clearLogs = () => {
    setLogs([])
    setStatus("")
  }

  return (
    <div className="min-h-screen bg-background p-8">
      <div className="max-w-4xl mx-auto space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EmailJS</CardTitle>
            <CardDescription>
              –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å –≤–∞—à–∏–º–∏ –∫–ª—é—á–∞–º–∏
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex gap-4">
              <Button
                onClick={testEmailJS}
                disabled={isLoading}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {isLoading ? "üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º..." : "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç"}
              </Button>
              <Button
                onClick={clearLogs}
                variant="outline"
                disabled={isLoading}
              >
                üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
              </Button>
              <Button
                onClick={() => window.location.href = "/"}
                variant="outline"
              >
                ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
              </Button>
            </div>

            {status && (
              <div className={`p-4 rounded-lg ${
                status.includes("‚úÖ")
                  ? "bg-green-50 border border-green-200 text-green-800"
                  : "bg-red-50 border border-red-200 text-red-800"
              }`}>
                <strong>{status}</strong>
              </div>
            )}
          </CardContent>
        </Card>

        {logs.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle>üìã –õ–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm max-h-96 overflow-y-auto">
                {logs.map((log, index) => (
                  <div key={index} className="mb-1">
                    {log}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        <Card>
          <CardHeader>
            <CardTitle>üìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2 font-mono text-sm">
              <div><strong>SERVICE_ID:</strong> {EMAILJS_CONFIG.SERVICE_ID}</div>
              <div><strong>TEMPLATE_ID:</strong> {EMAILJS_CONFIG.TEMPLATE_ID}</div>
              <div><strong>PUBLIC_KEY:</strong> {EMAILJS_CONFIG.PUBLIC_KEY.substring(0, 10)}...</div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>üí° –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —ç—Ç–æ—Ç —Ç–µ—Å—Ç</CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2 text-sm">
              <li>‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ EmailJS –±–∏–±–ª–∏–æ—Ç–µ–∫–∏</li>
              <li>‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –∫–ª—é—á–µ–π</li>
              <li>‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EmailJS</li>
              <li>‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email</li>
              <li>‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫</li>
            </ul>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

// –¢–∏–ø—ã –¥–ª—è window.emailjs
declare global {
  interface Window {
    emailjs: {
      init: (publicKey: string) => void
      send: (serviceId: string, templateId: string, templateParams: any, publicKey: string) => Promise<any>
    }
  }
}
